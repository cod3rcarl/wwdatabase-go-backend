// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Champion struct {
	TitleHolder            string  `json:"titleHolder"`
	TitleHolderNumber      *int    `json:"titleHolderNumber"`
	TitleHolderOrderNumber *int    `json:"titleHolderOrderNumber"`
	DateWon                string  `json:"dateWon"`
	DateLost               *string `json:"dateLost"`
	Show                   string  `json:"show"`
	NumberOfReigns         *int    `json:"numberOfReigns"`
	DaysAsChampion         *int    `json:"daysAsChampion"`
	PreviousChampion       *string `json:"previousChampion"`
	CurrentChampion        *bool   `json:"currentChampion"`
}

type ChampionOrderByInput struct {
	TitleHolder    *Sort `json:"titleHolder"`
	DaysAsChampion *Sort `json:"daysAsChampion"`
}

type ChampionPayload struct {
	Champions  []*Champion `json:"champions"`
	TotalCount *int        `json:"totalCount"`
}

type CreateChampionInput struct {
	TitleHolder string  `json:"titleHolder"`
	DateWon     *string `json:"dateWon"`
	Show        string  `json:"show"`
}

type CreateChampionPayload struct {
	Success  bool      `json:"success"`
	Champion *Champion `json:"champion"`
}

type DeleteChampionInput struct {
	ID string `json:"id"`
}

type DeleteChampionPayload struct {
	Success bool   `json:"success"`
	ID      string `json:"id"`
}

type UpdateChampionInput struct {
	TitleHolderNumber      *int    `json:"titleHolderNumber"`
	TitleHolderOrderNumber *int    `json:"titleHolderOrderNumber"`
	DateLost               *string `json:"dateLost"`
	CurrentChampion        *bool   `json:"currentChampion"`
}

type UpdateChampionPayload struct {
	Success  bool      `json:"success"`
	Champion *Champion `json:"champion"`
}

type Sort string

const (
	SortAsc  Sort = "asc"
	SortDesc Sort = "desc"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
