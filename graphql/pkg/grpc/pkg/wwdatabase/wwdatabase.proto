syntax = "proto3";

package wwdatabase;

option go_package = "github.com/cod3rcarl/wwdatabase-go-backend;wwdatabase_go_backend";

import "google/protobuf/timestamp.proto";


service Wwdatabase {
  rpc GetChampions (GetChampionsRequest) returns (ChampionsList) {}
  rpc GetChampionByName (GetChampionByNameRequest) returns (ChampionsList) {}
  rpc GetCurrentChampion (GetCurrentChampionRequest) returns (ChampionResponse) {}
  rpc GetChampionByDate (GetChampionByDateRequest) returns (ChampionResponse) {}
  rpc GetChampionsByShow (GetChampionsByShowRequest) returns (ChampionsList) {}
  rpc GetChampionsByYear (GetChampionsByYearRequest) returns (ChampionsList) {}
  rpc GetChampionByOrderNumber (ChampionNumber) returns (ChampionResponse) {}
  rpc AddChampion (NewChampionData) returns (CreateChampionPayload) {}
  rpc UpdateChampion (UpdateChampionData) returns (UpdateChampionPayload) {}
  rpc DeleteChampion (DeleteChampionRequest) returns (DeleteChampionResponse) {}
}

message NewChampionData {
  string title_holder = 1;
  string show = 2;
  google.protobuf.Timestamp date_won = 3;

}

message UpdateChampionData {
  int32 title_holder_number = 1;
  int32 title_holder_order_number = 2;
  bool current_champion = 3;
  google.protobuf.Timestamp date_lost = 4;

}

message DeleteChampionRequest {
  string id = 1;
}

message DeleteChampionResponse {
  string id = 1;
}

message ChampionNumber {
  int32 title_holder_order_number = 1;
}

message ChampionResponse {
  Champion champion = 1;
}

message GetChampionByNameRequest {
  string name = 1;
}

message GetChampionsByShowRequest {
  string show = 1;
}

message GetChampionByDateRequest {
  google.protobuf.Timestamp date = 1;
}

message GetChampionsByYearRequest {
  google.protobuf.Timestamp start_date = 1;
  google.protobuf.Timestamp end_date = 2;
}


message Champion {
  string id = 1;
  string title_holder = 2;
  int32 title_holder_number = 3;
  google.protobuf.Timestamp date_won = 4;
  google.protobuf.Timestamp date_lost = 5;
  string show = 6;
  bool current_champion = 7;
  string previous_champion = 8;
  int32 title_holder_order_number = 9;
  int32 wrestler_id = 10;
}

message ChampionsList {
  int32 total_count = 1;
  repeated Champion champions = 2;

}

message GetCurrentChampionRequest {
  bool current_champion = 1;
}

message GetChampionsRequest {
  int32 skip = 1;
  int32 take = 2;
}

message CreateChampionPayload {
  bool success = 1;
  Champion champion = 2;
}

message UpdateChampionPayload {
  bool success = 1;
  Champion champion = 2;
}
