// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wwdatabase_go_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WwdatabaseClient is the client API for Wwdatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WwdatabaseClient interface {
	GetChampionByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Champion, error)
	GetCurrentChampion(ctx context.Context, in *GetCurrentChampionParams, opts ...grpc.CallOption) (*Champion, error)
	GetChampionByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*Champion, error)
	GetAllChampions(ctx context.Context, in *GetChampionsParams, opts ...grpc.CallOption) (*ChampionList, error)
	CreateChampion(ctx context.Context, in *NewChampionData, opts ...grpc.CallOption) (*CreateChampionPayload, error)
}

type wwdatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewWwdatabaseClient(cc grpc.ClientConnInterface) WwdatabaseClient {
	return &wwdatabaseClient{cc}
}

func (c *wwdatabaseClient) GetChampionByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Champion, error) {
	out := new(Champion)
	err := c.cc.Invoke(ctx, "/wwdatabase.Wwdatabase/GetChampionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wwdatabaseClient) GetCurrentChampion(ctx context.Context, in *GetCurrentChampionParams, opts ...grpc.CallOption) (*Champion, error) {
	out := new(Champion)
	err := c.cc.Invoke(ctx, "/wwdatabase.Wwdatabase/GetCurrentChampion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wwdatabaseClient) GetChampionByDate(ctx context.Context, in *Date, opts ...grpc.CallOption) (*Champion, error) {
	out := new(Champion)
	err := c.cc.Invoke(ctx, "/wwdatabase.Wwdatabase/GetChampionByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wwdatabaseClient) GetAllChampions(ctx context.Context, in *GetChampionsParams, opts ...grpc.CallOption) (*ChampionList, error) {
	out := new(ChampionList)
	err := c.cc.Invoke(ctx, "/wwdatabase.Wwdatabase/GetAllChampions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wwdatabaseClient) CreateChampion(ctx context.Context, in *NewChampionData, opts ...grpc.CallOption) (*CreateChampionPayload, error) {
	out := new(CreateChampionPayload)
	err := c.cc.Invoke(ctx, "/wwdatabase.Wwdatabase/CreateChampion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WwdatabaseServer is the server API for Wwdatabase service.
// All implementations must embed UnimplementedWwdatabaseServer
// for forward compatibility
type WwdatabaseServer interface {
	GetChampionByName(context.Context, *Name) (*Champion, error)
	GetCurrentChampion(context.Context, *GetCurrentChampionParams) (*Champion, error)
	GetChampionByDate(context.Context, *Date) (*Champion, error)
	GetAllChampions(context.Context, *GetChampionsParams) (*ChampionList, error)
	CreateChampion(context.Context, *NewChampionData) (*CreateChampionPayload, error)
	mustEmbedUnimplementedWwdatabaseServer()
}

// UnimplementedWwdatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedWwdatabaseServer struct {
}

func (UnimplementedWwdatabaseServer) GetChampionByName(context.Context, *Name) (*Champion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionByName not implemented")
}
func (UnimplementedWwdatabaseServer) GetCurrentChampion(context.Context, *GetCurrentChampionParams) (*Champion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentChampion not implemented")
}
func (UnimplementedWwdatabaseServer) GetChampionByDate(context.Context, *Date) (*Champion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionByDate not implemented")
}
func (UnimplementedWwdatabaseServer) GetAllChampions(context.Context, *GetChampionsParams) (*ChampionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChampions not implemented")
}
func (UnimplementedWwdatabaseServer) CreateChampion(context.Context, *NewChampionData) (*CreateChampionPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChampion not implemented")
}
func (UnimplementedWwdatabaseServer) mustEmbedUnimplementedWwdatabaseServer() {}

// UnsafeWwdatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WwdatabaseServer will
// result in compilation errors.
type UnsafeWwdatabaseServer interface {
	mustEmbedUnimplementedWwdatabaseServer()
}

func RegisterWwdatabaseServer(s grpc.ServiceRegistrar, srv WwdatabaseServer) {
	s.RegisterService(&Wwdatabase_ServiceDesc, srv)
}

func _Wwdatabase_GetChampionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WwdatabaseServer).GetChampionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwdatabase.Wwdatabase/GetChampionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WwdatabaseServer).GetChampionByName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wwdatabase_GetCurrentChampion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentChampionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WwdatabaseServer).GetCurrentChampion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwdatabase.Wwdatabase/GetCurrentChampion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WwdatabaseServer).GetCurrentChampion(ctx, req.(*GetCurrentChampionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wwdatabase_GetChampionByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WwdatabaseServer).GetChampionByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwdatabase.Wwdatabase/GetChampionByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WwdatabaseServer).GetChampionByDate(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wwdatabase_GetAllChampions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WwdatabaseServer).GetAllChampions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwdatabase.Wwdatabase/GetAllChampions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WwdatabaseServer).GetAllChampions(ctx, req.(*GetChampionsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wwdatabase_CreateChampion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChampionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WwdatabaseServer).CreateChampion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwdatabase.Wwdatabase/CreateChampion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WwdatabaseServer).CreateChampion(ctx, req.(*NewChampionData))
	}
	return interceptor(ctx, in, info, handler)
}

// Wwdatabase_ServiceDesc is the grpc.ServiceDesc for Wwdatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wwdatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wwdatabase.Wwdatabase",
	HandlerType: (*WwdatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChampionByName",
			Handler:    _Wwdatabase_GetChampionByName_Handler,
		},
		{
			MethodName: "GetCurrentChampion",
			Handler:    _Wwdatabase_GetCurrentChampion_Handler,
		},
		{
			MethodName: "GetChampionByDate",
			Handler:    _Wwdatabase_GetChampionByDate_Handler,
		},
		{
			MethodName: "GetAllChampions",
			Handler:    _Wwdatabase_GetAllChampions_Handler,
		},
		{
			MethodName: "CreateChampion",
			Handler:    _Wwdatabase_CreateChampion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wwdatabase/wwdatabase.proto",
}
